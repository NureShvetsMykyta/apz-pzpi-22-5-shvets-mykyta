  Міністерство освіти та науки України
Харківський національний університет радіоелектроніки


Кафедра програмної інженерії



ЗВІТ 
до практичного заняття 1 з дисципліни 
“Архітектура програмного забезпечення”
на тему: “Патерн (шаблон) проєктування ПЗ «Команда»” 



Виконав 
ст. гр. ПЗПІ-22-5
Швець Микита Сергійович

Перевірив
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович







Харків 2025
1 ІСТОРІЯ ЗМІН

№ДатаВерсія звітуОпис змін та виправлень111.06.20250.1Створено розділи «Завдання», «Опис виконаної роботи» та «Висновки»212.06.20250.2Створено «Додаток Б» та «Додаток В»313.06.20250.3Створено «Додаток А»
2 ЗАВДАННЯ

     1. Підготувати доповідь на тему: «Шаблон проєктування ПЗ «Команда».
     2. Створити та оформити слайди презентації доповіді.
     3. Створити та опублікувати на YouTube відеозапис доповіді.

3 ОПИС ВИКОНАНОЇ РОБОТИ

     1. Було створено доповідь на тему: «Шаблон проєктування ПЗ «Будівельник».
     2. Було написано код для демонстрування ефективності шаблону «Будівельник» (див. Додаток В).
     3. Було створено та оформлено слайди презентації доповіді (див. Додаток Б).
     4. Було створено та опублікувано на YouTube відеозапис доповіді (див. Додаток А).


4 ВИСНОВКИ

     В результаті виконання практичного завдання було досліджено призначення, принципи та переваги використання шаблонів проєктування для створення гнучкого й масштабованого програмного забезпечення.

ДОДАТОК А

Відеозапис доповіді на YouTube: https://youtu.be/RZtIvYYk6lo

Хронологія відео:
00:00 - Вступ 
00:12 - Визначення та суть 
01:09 - Проблеми 
02:10 - Коли використовувати 
03:11 - Структура 
04:04 - Базовий приклад (Java) 
04:51 - Приклад 1: Undo/Redo 
05:46 - Приклад 2: Макрокоманда 
06:35 - Приклад 3: Логування в черзі 
07:24 - Переваги та недоліки 
08:20 - Суміжні патерни 
08:51 - Висновки

ДОДАТОК Б

Слайди презентації


Рисунок 1.1 – Титульний слайд


Рисунок 1.2 – Визначення та суть


Рисунок 1.3 – Проблеми


Рисунок 1.4 – Коли використовувати 




Рисунок 1.5 – Структура


Рисунок 1.6 – Базовий приклад



Рисунок 1.7 – Приклад 1: Undo/Redo


Рисунок 1.8 – Приклад 2: Макрокоманда



Рисунок 1.9 – Приклад 3: Логування в черзі


Рисунок 1.10 – Переваги та недоліки



Рисунок 1.11 – Суміжні патерни


Рисунок 1.12 – Висновки



Рисунок 1.13 – Джерела


ДОДАТОК В

Програмний код

  1  // інтерфейс
  2  public interface Command { void execute(); }
  3
  4  // команда вмикання світла
  5  public class LightOn implements Command {
  6    private LightReceiver recv;
  7    public LightOn(LightReceiver r){ recv = r; }
  8    public void execute(){ recv.turnOn(); }
  9  }
 10
 11  // команда вимикання світла
 12  public class LightOff implements Command {
 13    private LightReceiver recv;
 14    public LightOff(LightReceiver r){ recv = r; }
 15    public void execute(){ recv.turnOff(); }
 16  }
 17
 18  // команда з undo
 19  interface Undoable { void execute(); void undo(); }
 20
 21  class TextCmd implements Undoable {
 22    private StringBuilder doc;
 23    private String text;
 24    public TextCmd(StringBuilder d, String t){ doc=d; text=t; }
 25    public void execute(){ doc.append(text); }
 26    public void undo(){ doc.delete(doc.length()-text.length(), doc.length()); }
 27  }
 28
 29  // менеджер команд
 30  class UndoMgr {
 31    private Stack&lt;Undoable&gt; history = new Stack<>();
 32    void exec(Undoable c){ c.execute(); history.push(c); }
 33    void undo(){ if(!history.isEmpty()) history.pop().undo(); }
 34  }
 35
 36  // макрокоманда об’єднує кілька команд
 37  class MacroCmd implements Command {
 38    private List&lt;Command&gt; cmds = new ArrayList<>();
 39    void add(Command c){ cmds.add(c); }
 40    public void execute(){ for(Command c: cmds) c.execute(); }
 41  }
 42
 43  // приклад
 44  RemoteControl rc = new RemoteControl();
 45  MacroCmd party = new MacroCmd();
 46  party.add(new LightOn(receiver));
 47  party.add(new LightOff(receiver));
 48  rc.setCommand(party);
 49  rc.invoke();
 50
 51  // логуюча обгортка
 52  class LogCmd implements Command {
 53    private Command cmd;
 54    public LogCmd(Command c){ cmd=c; }
 55    public void execute(){
 56      System.out.println("Лог: "+cmd.getClass().getSimpleName());
 57      cmd.execute();
 58    }
 59  }
 60
 61  // черга виконання
 62  class CmdQueue {
 63    private Queue&lt;Command&gt; q = new LinkedList<>();
 64    void add(Command c){ q.add(c); }
 65    void runAll(){ while(!q.isEmpty()) q.poll().execute(); }
 66  }

